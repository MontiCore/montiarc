/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "com.github.johnrengelman.shadow" version "$shadow_version"
}

group = "montiarc.generators"

test { useJUnitPlatform() }

dependencies {
  implementation("de.monticore:monticore-runtime:$mc_version")
  implementation("de.monticore:monticore-grammar:$mc_version")
  implementation("de.monticore:class2mc:$mc_version")
  implementation("de.monticore.lang:cd4analysis:$cd4a_version")
  implementation("de.se_rwth.commons:se-commons-groovy:$se_commons_version")
  implementation("org.codehaus.janino:janino:$janino_version")
  implementation("com.google.guava:guava:$guava_version")
  implementation("com.github.javaparser:javaparser-core:3.18.0")
  implementation("org.codehaus.groovy:groovy:$groovy_version")

  testImplementation("de.monticore:monticore-runtime:$mc_version") {
    capabilities {
      requireCapability("de.monticore:monticore-runtime-tests")
    }
  }
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
  testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
}

java {
  //withJavadocJar()
  withSourcesJar()
}

shadowJar {
  minimize()

  manifest {
    attributes "Main-Class": "de.monticore.cd2pojo.POJOGeneratorScript"
  }

  zip64 = true
  archiveClassifier = "mc-tool"
  archiveBaseName = "CD2POJO"
  archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

jar.dependsOn(shadowJar)

publishing {

  publications {
    mavenJava(MavenPublication) { from(components.java) }
  }

  repositories {

    maven {
      name = "$SE_Nexus_ID"
      credentials.username(mavenUser)
      credentials.password(mavenPassword)
      url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
    }

    def CI_JOB_TOKEN = System.getenv("CI_JOB_TOKEN")
    if(CI_JOB_TOKEN != null) {
      maven {
        name = "MontiArcGitlab"
        url = montiArcGitLabMaven
        credentials(HttpHeaderCredentials) {
          name = "Job-Token"
          value = CI_JOB_TOKEN
        }
        authentication {
          header(HttpHeaderAuthentication)
        }
      }
    }
  }
}