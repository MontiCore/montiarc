/* (c) https://github.com/MontiCore/monticore */
package domain;
import java.io.File;

classdiagram RoadNetwork {

  /*******************
   *   StraÃŸennetz   *
   *******************/

  interface Mega;
  
  class A implements Mega;
  
  class B extends A;

  interface Z;

  class C extends A implements Z;

  class StreetNetwork;
  association [1] StreetNetwork -> Node [*];
  association [1] StreetNetwork -> (street) Connection [0..1];

  class Node {
    String id;
  }

  association [1] Node -> Point [1];

  class Point {
    double x;
    double y;
  }

  class Connection {
    double weight;
  }

  association [*] Connection (outgoing) <-> (src) Node [1];
  association [*] Connection (incoming) <-> (target) Node [1];

  class Path;
  association [1] Path -> (path) Connection [*];

  class LTS {
    String id;
  }

  association [1] LTS -> (coordinator) Participant [0..1];

  class Position {
    double positionOnConnection;
  }

  association [1] Position -> (position) Connection [1];

  class Participant {
    String id;
    double width;
    double height;
    Position position;
    double velocity;
  }

  association [1] Participant -> (entourage) Participant [*];
  association [1] Participant -> LTS [*];
  association [1] Participant -> Kinodynamic [1];
  association [1] Participant -> (intentionPath) Path [1];
  association [1] Participant -> (preceptedPath) Path [1];
  association [1] Participant -> (possiblePaths) Path [*];
  association [1] Participant -> (interaction) InteractionMode [1];
  association [1] Participant -> PlanState [1];
  association [1] Participant -> ComputingCapacity[1];

  enum PlanState {
    IDLE, PLANNING, DONE;
  }

  enum InteractionMode {
    PASSIVE, ACTIVE;
  }

  // extension point for advanced kinodynamic models
  class Kinodynamic;

  // extension point for defining the computing capacity
  class ComputingCapacity; 

  /*******************
   *  Communication  *
   *******************/

  class CommunicationChannel {
    double latency;
    double bandwidth;
  }
  association [1] CommunicationChannel -> (type) ChannelType [1];
  association [1] CommunicationChannel -> Message [*];

  enum ChannelType {
    UMTS, WLAN;
  }

  class Message {
    String content;

  }
  association [1] Message -> (reciepients) Participant [*];
  association [1] Message -> MessageType [1];

  enum MessageType {
    P2P, BROADCAST;
  }

  /*
  class StringList {
   java.util.List<String> listOfStrings;
  }

  class StringListList {
     java.util.List<java.util.List<String>> listOfListOfStrings;
  }
  */
}