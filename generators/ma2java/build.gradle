/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
  id "jacoco"
  id "com.github.johnrengelman.shadow" version "$shadow_version"
}

group = "montiarc.generators"

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

configurations {
  runtime {
    exclude group: "de.monticore.lang", module: "cd4analysis"
    exclude group: "org.codehaus.groovy", module: "groovy"
  }
  testmodels
}

configurations.all {
  resolutionStrategy {
    force "de.monticore.lang:cd4analysis:$cd4a_version"
  }
}

dependencies {
  //MontiCore dependencies
  implementation("de.monticore:monticore-grammar:$mc_version")
  implementation("de.monticore.lang:statecharts:$mc_version")
  implementation("de.se_rwth.commons:se-commons-groovy:$se_commons_version")

  //Internal dependencies
  implementation(project(":languages:arc-fe"))
  implementation(project(":languages:montiarc-fe"))
  implementation(project(":libraries:majava-rte"))
  testImplementation(project(":generators:cd2pojo"))

  //Model dependencies
  testmodels("montiarc.languages:montiarc-fe:$version:$testmodels_classifier")

  //Other dependencies
  implementation("org.apache.commons:commons-lang3:3.9")
  implementation("org.codehaus.janino:janino:$janino_version")
  implementation("org.codehaus.groovy:groovy:$groovy_version")
  implementation("com.google.googlejavaformat:google-java-format:$java_formatter_version")
  testImplementation("com.github.javaparser:javaparser-symbol-solver-core:$java_parser_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare:$emf_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare.match:$emf_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare.diff:$emf_version")
  testImplementation("org.eclipse.jdt:org.eclipse.jdt.compiler.tool:$eclipse_compiler_version")
  testImplementation("org.eclipse.jdt:org.eclipse.jdt.compiler.apt:1.3.1300")
  testImplementation("org.mockito:mockito-core:$mockito_version")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
  testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
}

task unpackTestmodels(type:Sync) {
  dependsOn(configurations.testmodels)

  from {
    configurations.testmodels.collect { zipTree(it) }
  }
  into "$buildDir/test-models"
}

java {
  //withJavadocJar()
  withSourcesJar()
}

// all in one tool-jar
shadowJar {
  minimize()

  manifest {
    attributes "Main-Class": "montiarc.generator.MontiArcTool"
  }

  zip64 = true
  archiveClassifier = "mc-tool"
  archiveBaseName = "MontiArc2Java"
  archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

jar.dependsOn(shadowJar)
compileJava.mustRunAfter(project.collect {it.project(":languages:montiarc-fe").getTasks().withType(Test) })


publishing {

  publications {
    mavenJava(MavenPublication) { from(components.java) }
  }

  repositories {

    maven {
      name = "$SE_Nexus_ID"
      credentials.username(mavenUser)
      credentials.password(mavenPassword)
      url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
    }

    def CI_JOB_TOKEN = System.getenv("CI_JOB_TOKEN")
    if(CI_JOB_TOKEN != null) {
      maven {
        name = "MontiArcGitlab"
        url = montiArcGitLabMaven
        credentials(HttpHeaderCredentials) {
          name = "Job-Token"
          value = CI_JOB_TOKEN
        }
        authentication {
          header(HttpHeaderAuthentication)
        }
      }
    }
  }
}