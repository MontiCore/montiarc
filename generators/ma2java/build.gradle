/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
  id "jacoco"
  id "com.github.johnrengelman.shadow" version "$shadow_version"
}

group = "montiarc.generators"

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

configurations { testmodels }

dependencies {
  //MontiCore dependencies
  implementation("de.monticore:monticore-runtime:$mc_version")
  implementation("de.monticore:monticore-grammar:$mc_version")
  implementation("de.monticore.lang:statecharts:$mc_version")
  testImplementation("de.monticore:monticore-runtime:$mc_version")
  implementation("de.se_rwth.commons:se-commons-groovy:$se_commons_version")

  //Internal dependencies
  implementation(project(":languages:arc-fe"))
  implementation(project(":languages:behavior-fe"))
  implementation(project(":languages:montiarc-fe"))
  implementation(project(":libraries:majava-rte"))
  implementation(project(":util"))

  //Model dependencies
  testmodels("montiarc.languages:montiarc-fe:$version:$testmodels_classifier")

  //Other dependencies
  implementation("org.codehaus.janino:janino:$janino_version")
  implementation("org.codehaus.groovy:groovy:$groovy_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare:$emf_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare.match:$emf_version")
  testImplementation("org.eclipse.emf:org.eclipse.emf.compare.diff:$emf_version")
}

task unpackTestmodels(type:Sync) {
  dependsOn(configurations.testmodels)

  from {
    configurations.testmodels.collect { zipTree(it) }
  }
  into "$buildDir/test-models"
}

java {
  //withJavadocJar()
  withSourcesJar()
}

// all in one cli-jar
shadowJar {
  manifest {
    attributes "Main-Class": "montiarc.generator.MontiArcCLI"
  }
  archiveClassifier = "cli"
  archiveBaseName = "MontiArc2Java"
  archiveFileName = "${archiveBaseName.get()}CLI-${archiveVersion.get()}.${archiveExtension.get()}"
}

jar.dependsOn(shadowJar)
jar.mustRunAfter(test)

publishing {
  publications {
    mavenJava(MavenPublication) { from(components.java) }
  }
  repositories.maven {
    name = "$SE_Nexus_ID"
    credentials.username(mavenUser)
    credentials.password(mavenPassword)
    url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
  }
}