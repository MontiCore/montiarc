# (c) https://github.com/MontiCore/monticore  
# Build JAVA applications using Apache Maven (http://maven.apache.org)

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository/
  key: "$CI_COMMIT_SHA" # Cache across branch and stage

stages:
  - build
  - test
  - post-test
  - check
  - mirror
      
Validate Gradle:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11
  stage: build
  allow_failure: false
  artifacts:
    paths:
      - applications/bumperbot/target/
      - applications/factory/target/
      - applications/factoryTask/target/
      - applications/lightControl/target/
      - generators/cd2pojo/target/
      - generators/ma2java/target/
      - languages/arc-fe/target/
      - languages/behavior-fe/target/
      - languages/montiarc-fe/target/
      - libraries/lejos-rte/target/
      - libraries/majava-rte/target/
      - libraries/simulator-rte/target/
    expire_in: 1 week
  script:
    - gradle clean assemble
    
.unit_test_template: &unit_test_definition
  stage: test
  dependencies: 
    - Validate Gradle #download artifacts from build
  needs: ["Validate Gradle"]
  script:
    - gradle test

Unit Test JDK 11:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11
  allow_failure: false
  <<: *unit_test_definition

Deploy Nexus:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11
  stage: post-test
  script:
    - gradle publish -PmavenPassword=$pass -PmavenUser=$user
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: on_success

checkMDLinks:
  stage: check
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3.5.4-jdk-8-alpine
  script:
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build\" --output MDLinkCheckerCLI.jar"
    - "url=https://git.rwth-aachen.de/monticore/montiarc/core/-/tree/develop"
    - "linkCheckRes=$(java -jar MDLinkCheckerCLI.jar -url $url -t $secibuildtoken)"
    - "echo \"$linkCheckRes\""
    - "if [[ $linkCheckRes == *\"ERROR\"* ]]; then exit 1; fi"

# Mirrors this repository to GitHub.
#
# The mirror will always be at either HEAD or HEAD+1 (depending on whether cleanup is necessary).
# For more information, visit: https://git.rwth-aachen.de/monticore/auxiliary-development-tools/github-mirror-tools (Available internally only)
Github Mirror:
  stage: mirror
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11
  variables:
    # The repository is edited during this job. To make sure that no changes persist, we instruct GitLab to always
    # create a fresh clone of the repository instead of caching it and attempting to remove any changes.
    #
    # See https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: clone
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SE_CIBUILD_SSH_PRIV_KEY")
    - echo "$SE_CIBUILD_SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.email "noreply-ci@se-rwth.de"
    - git config --global user.name "MontiCore Mirroring Bot"
    - git checkout "$CI_COMMIT_REF_NAME" # GitLab checks out a commit in detached HEAD mode by default, but we want to commit to the branch and push.
    - mkdir -p ~/.ssh
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - git lfs fetch --all
    - git remote add github git@github.com:MontiCore/montiarc.git
    - git fetch --all
    - if git rev-parse --quiet --verify github/"$CI_COMMIT_BRANCH" > /dev/null; 
      then git pull --rebase github "$CI_COMMIT_BRANCH";
      fi
    - git push --force github $CI_COMMIT_BRANCH
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
