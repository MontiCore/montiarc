# (c) https://github.com/MontiCore/monticore  
# Build JAVA applications using Gradle (https://gradle.org/)

stages:
  - build
  - post-build
  - test
  - post-test
  - check
  - mirror
      
Build jdk17:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.5.0-jdk17
  stage: build
  allow_failure: false
  artifacts:
    paths:
      - applications/**/build/
      - build-logic/.gradle/
      - build-logic/build/
      - generators/**/build/
      - languages/build/
      - libraries/**/build/
      - tooling/language-server/build/generated-sources/MontiArc/plugins/montiarc-intellij-plugin/build/distributions/
      - .gradle/
    expire_in: 1 week
  script:
    - gradle clean assemble

Package Uber jdk17:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.5.0-jdk17
  stage: post-build
  dependencies:
    - Build jdk17
  needs: ["Build jdk17"]
  allow_failure: false
  script:
    - gradle shadowjar
    
.unit_test_template: &unit_test_definition
  stage: test
  dependencies: 
    - Build jdk17
  needs: ["Build jdk17"]
  script:
    - gradle test jacocoAggregatedTestReport
    - awk -F","
      '{ instructions += $4 + $5; covered += $5 } END
      { print covered, "/", instructions, " instructions covered"; print 100*covered/instructions, "% covered" }'
      'build/reports/test-coverage/jacocoAggregated.csv'
  coverage: '/\d+.\d+ \% covered/'
  artifacts:
    paths:
      - generators/ma2java/build/reports/test-coverage/jacoco.xml
      - languages/build/basis/reports/test-coverage/jacoco.xml
      - languages/build/montiarc/reports/test-coverage/jacoco.xml
    when: always

Unit Test jdk17:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.5.0-jdk17
  allow_failure: false
  <<: *unit_test_definition

Test Coverage jdk17:
  stage: post-test
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    - python /opt/cover2cover.py
      generators/ma2java/build/reports/test-coverage/jacoco.xml
      generators/ma2java/main/java/
      > generators/ma2java/build/reports/test-coverage/cobertura.xml
    - python /opt/cover2cover.py
      languages/build/basis/reports/test-coverage/jacoco.xml
      languages/basis/main/java/
      > languages/build/basis/reports/test-coverage/cobertura.xml
    - python /opt/cover2cover.py
      languages/build/montiarc/reports/test-coverage/jacoco.xml
      languages/montiarc/main/java/
      > languages/build/montiarc/reports/test-coverage/cobertura.xml
  dependencies:
    - Unit Test jdk17
  needs: ["Unit Test jdk17"]
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/reports/test-coverage/cobertura.xml"

Deploy Nexus:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.5.0-jdk17
  stage: post-test
  dependencies:
    - Build jdk17 #download artifacts from build
  script:
    - gradle publish :plugin:publish -PmavenPassword=$pass -PmavenUser=$user
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: on_success

# Mirrors this repository to GitHub.
#
# The mirror will always be at either HEAD or HEAD+1 (depending on whether cleanup is necessary).
# For more information, visit: https://git.rwth-aachen.de/monticore/auxiliary-development-tools/github-mirror-tools (Available internally only)
Github Mirror:
  stage: mirror
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11
  variables:
    # The repository is edited during this job. To make sure that no changes persist, we instruct GitLab to always
    # create a fresh clone of the repository instead of caching it and attempting to remove any changes.
    #
    # See https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: clone
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SE_CIBUILD_SSH_PRIV_KEY")
    - echo "$SE_CIBUILD_SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.email "noreply-ci@se-rwth.de"
    - git config --global user.name "MontiCore Mirroring Bot"
    - git checkout "$CI_COMMIT_REF_NAME" # GitLab checks out a commit in detached HEAD mode by default, but we want to commit to the branch and push.
    - mkdir -p ~/.ssh
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - git lfs fetch --all
    - git remote add github git@github.com:MontiCore/montiarc.git
    - git fetch --all
    - if git rev-parse --quiet --verify github/"$CI_COMMIT_BRANCH" > /dev/null; 
      then git pull --rebase github "$CI_COMMIT_BRANCH";
      fi
    - git push --force github $CI_COMMIT_BRANCH
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: on_success

Check Links:
  # We need a JDK 17+ image for this job since the link checker requires Java 17.
  image: eclipse-temurin:17-jdk-alpine
  stage: check
  # We don't want to fail the pipeline if a link is invalid. Therefore, allow
  # failure regardless of whether the tool exists with an error code.
  allow_failure: true
  before_script:
    - 'apk --no-cache add curl'
  script:
    - 'curl --location --header "PRIVATE-TOKEN: $secibuildtoken" "https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build" --output MDLinkChecker.jar'
    - 'java -jar MDLinkChecker.jar -t "$secibuildtoken" -r . -p'
  # The link-check does not depend on any artifacts generated by other jobs and
  # can therefore run immediately.
  needs: []
