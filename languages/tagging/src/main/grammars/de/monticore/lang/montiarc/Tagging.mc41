package de.monticore.lang.montiarc;

/**
 * Basic grammar to tag non-functional properties
 *
 * @author Michael von Wenckstern
 */
grammar Tagging extends de.monticore.common.Common {

  TaggingUnit@! =
    ("package" package:(Name& || ".")+ ";")? 
    (ImportStatement)*
    "conforms" "to" (QualifiedName || ",")+ ";"
	TagBody;
	
	// name should be optional, but than we need an transformation step in the parser
	// b/c the symbol table needs a name
	// and we need the symbol table for coco checks
	// maybe later for convience we make the optional
	TagBody = "tags" Name? ("for" targetModel: Scope)? "{"
	   TagElement+ "}";
	   
	interface TagElement;
	
	// use Scope to add tags for Model, e.g.
	// grammar ComponentTags extends MontiArc, Tagging {
	//   ComponentScope implements Scope = Component; }
	interface Scope;
	ast Scope =
	  method public String getScopeKind() {
	    return "undefined";
	  };

	// this one is only defined here, to get Parser Tags
	NameScope implements Scope = QualifiedName;
	ast NameScope =
	  method public String getScopeKind() {
  	  return "NameScope";
  	};

	ConnectorScope extends NameScope = source:QualifiedName "->" QualifiedName;
  ast ConnectorScope =
    method public String getScopeKind() {
      return "ConnectorScope";
    };

	Context implements TagElement = "within" Name "{"
	  TagElement+ "}";
	
	// the name from ML's tagging language
	TargetElement implements TagElement = "tag" (Scope || ",")+ "with" (Tag || ",")+ ";" ;
	
	interface Tag;
 	ast Tag =
	  method public String getName() {
	   return "";
	  }
	  method public String getTagKind() {
	    return "undefined"; // to avoid reflection
	  };
	
	SimpleTag implements Tag = Name;
	ast SimpleTag =
	  method public String getTagKind() {
  	    return "SimpleTag";
  	};
	
	ValuedTag implements Tag = Name "=" TagValue;
	ast ValuedTag =
  	method public String getTagKind() {
       return "ValuedTag";
    };
	
	ComplexTag implements Tag = Name "{" (Tag || ",")+ ";" "}";
	ast ComplexTag =
    method public String getTagKind() {
      return "ComplexTag";
    };

	 RegexTag implements Tag = Name "=" regex:Regex ;
	 ast RegexTag =
     method public String getTagKind() {
       return "RegexTag";
     };

   token Regex = '[' (~('[' | ']') | String | Regex)+ ']';
	
/*	interface TagValue;
	ast TagValue =
	  method public String getValueKind() {
	    return "undefined";
	  };

*/
/*	StringTagValue implements TagValue = String;
	ast StringTagValue =
	  method public String getValueKind() {
      return "StringValue";
    }; */

 /* EnumTagValue implements TagValue = Enum;
  ast EnumTagValue =
    method public String getValueKind() {
      return "EnumValue";
    }; */

  TagValue = (Name | "+" | "-" | "/" | "#" | NumericLiteral)+ | "true" | "false" | String;
  token TagValueT = ('a'..'z' | 'A'..'Z' | '0'..'9' | '.' | '+' | '-' | '/')+;
	/*NumericTagValue implements TagValue = NumericLiteral;
	ast NumericTagValue =
	  method public String getValueKind() {
	    return "NumericValue";
	  };

  BooleanTagValue implements TagValue = (t:"true" | f:"false"); // cannot use true or True, that's why we use t, similar for f
  ast BooleanTagValue =
    method public String getValueKind() {
      return "BooleanValue";
    };

	UnitTagValue implements TagValue = NumericLiteral unit:Name;
	ast UnitTagValue =
	  method public String getValueKind() {
	    return "UnitValue";
	  };*/
}