package de.monticore.lang.montiarc;

/**
 * Basic grammar to tag non-functional properties
 *
 * @author Michael von Wenckstern
 */
grammar TagSchema extends de.monticore.common.Common {

  TagSchemaUnit@! =
    ("package" package:(Name& || ".")+ ";")? 
    (ImportStatement)*
    "tagschema" Name "{" TagType+ "}";
	
	interface TagType;
  //ComplexTagType | EnumeratedTagType | ValuedTagType | SimpleTagType;
	ast TagType =
	  method public String getName() {
	    return "undefined";
	  };

	interface ScopeIdentifier;

	ast ScopeIdentifier =
	  method public String getScopeName() {
	    return "undefined";
	  };

	/** maybe this should be moved into the MontiArc grammar, b/c MontiArc knows what is taggable */
	ComponentScope implements ScopeIdentifier = "Component";
  ast ComponentScope =
    method public String getScopeName() {
      return "Component";
    };

	PortScope implements ScopeIdentifier = "Port";
	ast PortScope =
    method public String getScopeName() {
      return "Port";
    };

	ConnectorScope implements ScopeIdentifier = "Connector";
	ast ConnectorScope =
    method public String getScopeName() {
      return "Connector";
    };

	ComponentInstanceScope implements ScopeIdentifier = "ComponentInstance";
	ast ComponentInstanceScope =
    method public String getScopeName() {
      return "ExpandedComponentInstance";
    };
	
//	ScopeIdentifier = Name;
	
	Scope = "for" (ScopeIdentifier || ",")+;
	
	SimpleTagType implements TagType  = ("private")? "tagtype" Name Scope? ";" ;

	// modification form ML's tagging language (replaced String by Name --> is more to Java feeling)
	EnumeratedTagType  implements TagType  = ("private")? "tagtype" name:Name ":" enumText:Enum Scope? ";" ;
	token Enum = '[' (~('[' | ']') | String)+ ']';

	ValuedTagType implements TagType  = ("private")? "tagtype" Name ":"
	  (number:"Number"|string:"String"|boolean:"Boolean"|unitKind:Name) Scope? ";" ;

	// not supported in Symbol Table yet
//	ComplexTagType implements TagType = ("private")? "tagtype" Scope? "{" (Reference || ",")+ ";" "}" ;
//	ast ComplexTagType =
//    method public String getName() {
//      return "undefined";
//    };
	
//	Reference = Name ":" datatype:Name ("?"|"+"|"*")? ;

//  ComplexTagType  = "tagtype" Name Scope ComplexTagDef;
	ComplexTagType implements TagType  = ("private")? "tagtype" Name Scope? complexTag:ComplexTagDef;
	token ComplexTagDef = 'i' 's' WSS* Recursion (WSS* ';');
	fragment token Recursion = '{' (~('{' | '}' | '"') | String | Recursion)+ '}';
	fragment token WSS = (' ' | '\t' | '\r' | '\n');

/*	ast ComplexTagType =
    method public String getName() {
      return "undefined";
    };*/
}