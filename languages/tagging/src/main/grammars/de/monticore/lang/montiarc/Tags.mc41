package de.monticore.lang.montiarc;

/**
 * Basic grammar to tag non-functional properties
 * grammar to create only parsers for tag values
 *
 * @author Michael von Wenckstern
 */
grammar Tags extends de.monticore.common.Common {
  Tags = Tag*;
  Tag = "tag" Scope "with" Name (TagValue | ";");

  fragment token WSS = (' ' | '\t' | '\r' | '\n');

  token TagValue = ('=' WSS* Recursion) | TagToken | ('=' WSS* String WSS* ';');
  fragment token Recursion = '{' (~('{' | '}') | String | Recursion)+ '}';
  fragment token TagToken = '=' (~('"' | '{' | '}' | ';'))+ ';';

  interface Scope;
  NameScope implements Scope = Name;
  ConnectorScope implements Scope = QualifiedName "->" QualifiedName;
}