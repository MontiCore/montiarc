/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
  id "jacoco"
}

group = "montiarc.languages"

def grammarDir = "$projectDir/src/main/grammars"
def grammarOutDir = "$buildDir/generated-sources/monticore/sourcecode"

sourceSets {
  main {
    java.srcDirs += ["$grammarOutDir"]
  }
  grammars {
    resources {
      srcDirs(grammarDir)
      include "**/*.mc4"
    }
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

configurations { grammar }

dependencies {
  //Grammar dependencies
  grammar("de.monticore:monticore-grammar:$mc_version:$grammars_classifier")
  grammar("de.monticore.lang:statecharts:$mc_version:$grammars_classifier")
  grammar(project(":languages:arc-fe")) {
    capabilities {
      requireCapability("montiarc.languages:arc-fe-$grammars_classifier")
    }
  }
  grammar(project(":languages:behavior-fe")) {
    capabilities {
      requireCapability("montiarc.languages:behavior-fe-$grammars_classifier")
    }
  }

  //MontiCore dependencies
  implementation("de.monticore.lang:statecharts:$mc_version")
  implementation("de.monticore:monticore-runtime:$mc_version")
  implementation("de.monticore:monticore-grammar:$mc_version")
  testImplementation("de.monticore:monticore-runtime:$mc_version:tests")
  testImplementation("de.monticore:monticore-runtime:$mc_version")

  //Internal dependencies
  implementation(project(":languages:arc-fe"))
  implementation(project(":languages:behavior-fe"))
  implementation(project(":util"))
  testImplementation(project(":languages:arc-fe").sourceSets.test.output)
  testImplementation(project(":util").sourceSets.test.output)

  //Other dependencies
  implementation("de.se_rwth.commons:se-commons-logging:$se_commons_version")
  implementation("com.google.guava:guava:$guava_version")
  implementation("com.google.code.findbugs:jsr305:$jsr305_version")
  implementation("org.antlr:antlr4-runtime:$antlr_version")
  implementation("org.codehaus.janino:janino:$janino_version")
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
  testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version")
  testImplementation("org.assertj:assertj-core:$assertj_version")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
}

task generate {}

// one task per grammar file
fileTree(grammarDir).matching { include '**/*.mc4' }.each { File g ->
  String taskname = "generateGrammar${g.getName().substring(0, g.getName().lastIndexOf('.'))}"
  task "$taskname"(type: MCTask) {

    grammar = g
    outputDir = file grammarOutDir
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    outputs.upToDateWhen { incCheck(grammarIncludingPackage) }
  }
  generate.dependsOn("$taskname")
}

compileJava.dependsOn(generate)

java {
  //withJavadocJar()
  withSourcesJar()
  registerFeature("$grammars_classifier") {
    usingSourceSet(sourceSets.grammars)
  }
}

jar.dependsOn(grammarsJar)

publishing {
  publications {
    mavenJava(MavenPublication) { from(components.java) }
  }
  repositories.maven {
    name = "$SE_Nexus_ID"
    credentials.username(mavenUser)
    credentials.password(mavenPassword)
    url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
  }
}