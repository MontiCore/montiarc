package components.body.timing; //TODO Change package to components.body.connectors?

import components.body.subcomponents._subcomponents.HasGenericInputAndOutputPort;
import components.body.timing.delays.FixDelay;
import java.lang.String;

/*
 * Invalid model.
 * Contains undelayed reference cycles. Results in three errors, see below.
 *
 * Formerly named "CG2" in MontiArc3.
 *
 * @implements @implements [Hab16] CG1: Communication cycles without delay
 *                                        should be avoided. (p. 73 Lst. 3.55)
 * TODO Referenziert library Modell, das nicht mehr vorhanden ist
 */
component HasUndelayedMessageLoops {

  port 
    in String strIn,
    out String strOut; 

  component components.body.subcomponents._subcomponents.HasThreeGenericInAndOneOutPort<String> p1;
  component HasGenericInputAndOutputPort<String> p2;
  component HasGenericInputAndOutputPort<String> p3;
  component HasGenericInputAndOutputPort<String> p4;
  component HasGenericInputAndOutputPort<String> p5;
  component HasGenericInputAndOutputPort<String> p6;
  component FixDelay<String>(1) delay;
  
  connect p1.tOut -> p2.tIn, p3.tIn;
  connect p2.tOut -> p1.tIn1,
      //ERROR: There exists a feedback loop including the references 'p2, p1'
      //        to reference 'p1' that does not contain a reference to
      //        mc.umlp.arc.lib.FixDelay! A deadlock will be the result.
                     p4.tIn;
  connect p3.tOut -> p5.tIn;
  connect p5.tOut -> p6.tIn;
  connect p6.tOut -> p1.tIn2;
      //ERROR: There exists a feedback loop including the references
      //        'p6, p5, p3, p1' to reference 'p1' that does not contain a
      //        reference to mc.umlp.arc.lib.FixDelay!
      //        A deadlock will be the result.
  
  // correct loop
  connect p4.tOut -> delay.portIn;
  connect delay.portOut -> p1.tIn3;

  connect strIn -> strOut;
      //ERROR: The component 'CG2' has a direct loop to itself!
      //        A deadlock will be the result.
}
