/* (c) https://github.com/MontiCore/monticore */
package montiarc._symboltable;

import com.google.common.base.Preconditions;
import de.monticore.symbols.oosymbols._symboltable.MethodSymbolDeSer;
import de.monticore.symbols.oosymbols._symboltable.OOTypeSymbolDeSer;
import de.monticore.symboltable.serialization.JsonDeSers;
import de.monticore.symboltable.serialization.json.JsonElement;
import de.monticore.symboltable.serialization.json.JsonObject;
import de.se_rwth.commons.logging.Log;
import montiarc.MontiArcMill;
import org.codehaus.commons.nullanalysis.NotNull;

import java.util.ArrayList;
import java.util.List;

public class MontiArcDeSer extends MontiArcDeSerTOP {

  @Override
  public void deserializeAddons(@NotNull IMontiArcScope scope, @NotNull JsonObject scopeJson) {
    Preconditions.checkNotNull(scope);
    Preconditions.checkNotNull(scopeJson);
    this.doDeserializeAddons(scope, scopeJson);
  }

  @Override
  public void deserializeAddons(@NotNull IMontiArcArtifactScope scope, @NotNull JsonObject scopeJson) {
    Preconditions.checkNotNull(scope);
    Preconditions.checkNotNull(scopeJson);
    this.doDeserializeAddons(scope, scopeJson);
  }

  protected void doDeserializeAddons(@NotNull IMontiArcScope scope, @NotNull JsonObject scopeJson) {
    List<JsonElement> markedForRemoval = new ArrayList<>();
    for (JsonElement e : scopeJson.getArrayMember(JsonDeSers.SYMBOLS)) {
      if (e.isJsonObject() && JsonDeSers.getKind(e.getAsJsonObject())
        .equals("de.monticore.cdbasis._symboltable.CDTypeSymbol")) {
        scope.add(((OOTypeSymbolDeSer) MontiArcMill.globalScope()
          .getSymbolDeSer("de.monticore.cdbasis._symboltable.CDTypeSymbol"))
          .deserialize(e.getAsJsonObject()));
        markedForRemoval.add(e);
      } else if (e.isJsonObject() && JsonDeSers.getKind(e.getAsJsonObject())
        .equals("de.monticore.cd4codebasis._symboltable.CDMethodSignatureSymbol")) {
        scope.add(((MethodSymbolDeSer) MontiArcMill.globalScope()
          .getSymbolDeSer("de.monticore.cd4codebasis._symboltable.CDMethodSignatureSymbol"))
          .deserialize(e.getAsJsonObject()));
        markedForRemoval.add(e);
      }
    }
    scopeJson.getArrayMember(JsonDeSers.SYMBOLS).removeAll(markedForRemoval);
  }
  
  @Override
  protected  void deserializeSymbols (montiarc._symboltable.IMontiArcScope scope,de.monticore.symboltable.serialization.json.JsonObject scopeJson) {
    /* generated by template _symboltable.serialization.scopeDeSer.DeserializeSymbols*/
  
    for (de.monticore.symboltable.serialization.json.JsonObject symbol :
      de.monticore.symboltable.serialization.JsonDeSers.getSymbols(scopeJson)) {
      String kind = de.monticore.symboltable.serialization.JsonDeSers.getKind(symbol);
      switch (kind) {
        case "arcbasis._symboltable.ComponentInstanceSymbol":
          arcbasis._symboltable.ComponentInstanceSymbol s0 = (arcbasis._symboltable.ComponentInstanceSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s0);
          break;
        case "arcbasis._symboltable.ComponentTypeSymbol":
          arcbasis._symboltable.ComponentTypeSymbol s1 = (arcbasis._symboltable.ComponentTypeSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s1);
          scope.addSubScope(s1.getSpannedScope());
          break;
        case "arcbasis._symboltable.PortSymbol":
          arcbasis._symboltable.PortSymbol s2 = (arcbasis._symboltable.PortSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s2);
          break;
        case "de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol":
          de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol s3 = (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s3);
          break;
        case "de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol":
          de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol s4 = (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s4);
          scope.addSubScope(s4.getSpannedScope());
          break;
        case "de.monticore.symbols.basicsymbols._symboltable.TypeSymbol":
          de.monticore.symbols.basicsymbols._symboltable.TypeSymbol s5 = (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s5);
          scope.addSubScope(s5.getSpannedScope());
          break;
        case "de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol":
          de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol s6 = (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s6);
          break;
        case "de.monticore.symbols.basicsymbols._symboltable.VariableSymbol":
          de.monticore.symbols.basicsymbols._symboltable.VariableSymbol s7 = (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s7);
          break;
        case "de.monticore.symbols.oosymbols._symboltable.FieldSymbol":
          de.monticore.symbols.oosymbols._symboltable.FieldSymbol s8 = (de.monticore.symbols.oosymbols._symboltable.FieldSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s8);
          break;
        case "de.monticore.symbols.oosymbols._symboltable.MethodSymbol":
          de.monticore.symbols.oosymbols._symboltable.MethodSymbol s9 = (de.monticore.symbols.oosymbols._symboltable.MethodSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s9);
          break;
        case "de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol":
          de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol s10 = (de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s10);
          scope.addSubScope(s10.getSpannedScope());
          break;
        case "genericarc._symboltable.ArcTypeParameterSymbol":
          genericarc._symboltable.ArcTypeParameterSymbol s11 = (genericarc._symboltable.ArcTypeParameterSymbol)
            montiarc.MontiArcMill.globalScope().getSymbolDeSer(kind).deserialize(symbol);
          scope.add(s11);
          break;
        default:
          Log.debug("0xA1234xx39665 Unable to deserialize symbol of kind `" + kind + "`", "MontiArcDeSer");
      }
    }
  }
}