/* (c) https://github.com/MontiCore/monticore */
package montiarc._symboltable;

import de.se_rwth.commons.logging.Log;

import java.util.Collections;

//TODO: Get rid off when fixed in MontiCore
public class MontiArcScopeDeSer extends MontiArcScopeDeSerTOP {

  java.util.Map<String, String> kindHierarchy = Collections.emptyMap();

  protected  void addSymbols (de.monticore.symboltable.serialization.json.JsonObject scopeJson,montiarc._symboltable.IMontiArcScope scope) {
    /* generated by template _symboltable.serialization.scopeDeSer.AddSymbols*/

    // 1. deserialize the map with of the hierarchy of symbol kinds
    java.util.Map<String, String> tempKindHierarchy = de.monticore.symboltable.serialization.JsonDeSers.deserializeKindHierarchy(scopeJson);

    if (!tempKindHierarchy.isEmpty()) {
      kindHierarchy = tempKindHierarchy;
    }

    if (scopeJson.hasArrayMember(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS)) {
      //2. iterate over all stored symbols within the passed scope
      for (de.monticore.symboltable.serialization.json.JsonElement e :
        scopeJson.getArrayMember(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS)) {
        boolean foundSymbol = false;
        if (e.isJsonObject() && e.getAsJsonObject().hasStringMember(de.monticore.symboltable.serialization.JsonDeSers.KIND)) {
          de.monticore.symboltable.serialization.json.JsonObject symbol = e.getAsJsonObject();
          String kind = symbol.getStringMember(de.monticore.symboltable.serialization.JsonDeSers.KIND);
          // begin deserializing the stored symbol with the stored symbol kinds
          do {
            foundSymbol = addSymbol(kind, symbol, scope);
            // if the symbol was found, break the do-while loop
            if (foundSymbol) {
              break;
            }
            // otherwise, try to find the parent symbol kind of the current symbol kind, and try this next
            kind = de.monticore.symboltable.serialization.JsonDeSers.getParentKind(kind, kindHierarchy);
          } while (null != kind);
        }
        if (!foundSymbol) {
          Log.error("0xA1234x31686 Unable to deserialize symbol `" + e + "`");
        }
      }
    } else {
      Log.error("0xA1235x54143 Unable to deserialize symbols in `" + scopeJson + "`");
    }
  }
}