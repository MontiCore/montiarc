/* (c) https://github.com/MontiCore/monticore */

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

/**
 * MontiArc is an architecture and behavior modeling language and framework
 * that provides a platform independent structure and behavior modeling
 * language with an extensible code generation framework.
 * MontiArc covers components their ports, and connectors between components.
 *
 * Concrete sets of expressions, literals and types are defined using
 * the standards available from the MontiCore library,
 * which renders MontiArc to be a complete language.
 *
 * MontiCore also adds the possibility to define a concrete form
 * of timing, namely instant, sync and untimed.
 * See e.g. Focus (Broy/Stoelen 2001) for the underlying theory.
 *
 * This grammar is part of the MontiArc language definition,
 * which are organized according to this extension hierarchy:
 * * ArcBasis.mc4
 * * -- ComfortableArc.mc4
 * * -- GenericArc.mc4
 *
 * * ArcCore.mc4 composes
 *   + ArcBasis.mc4 + ComfortableArc.mc4 + GenericArc.mc4
 *   and builds the core of architectural modelling
 *   (still without concrete expressions, literals, etc.)
 *
 * Furthermore MontiArc.mc4 extends Arc.mc4 to a complete
 * language, with Expressions, Literals, etc. defined
 * * ArcCore.mc4
 * * -- MontiArc.mc4
 * 
 */
 
grammar MontiArc extends 
            de.monticore.literals.MCCommonLiterals,
            de.monticore.expressions.CommonExpressions,
            de.monticore.expressions.AssignmentExpressions,
            de.monticore.types.MCSimpleGenericTypes,
            de.monticore.statements.MCCommonStatements,
            de.monticore.statements.MCVarDeclarationStatements,
            ArcAutomaton,
            ArcCore,
            VariableArc                                 {

  /** ASTMACompilationUnit represents the entire content of a MontiArc model
   * @attribute package The package declaration of the component model
   * @attribute importStatement List of imported elements
   * @attribute component Outermost component defined in this compilation unit.
   */
  scope MACompilationUnit =
    ("package" package:MCQualifiedName ";")?
    importStatement:MCImportStatement*
    ComponentType
    EOF
  ;

  /**
   * ASTArcTiming sets the timing of a component.
   * * timing untimed: means that there is no explicit timing available;
   *          instead messages are processed on an event driven basis
   *          upon arrival; as usual: certain non-deterministic 
   *          effects may occur.
   *
   * In all other variants, there is a globally available clock that
   * measures time slices of equal distance
   * (see Focus (Broy/Stoelen 2001) for the formal theoretical underpinning)
   *
   *  timing instant: means that each input is processed immediately
   *         and the result is produced to the out ports directly.
   *  timing sync: means that each in each time slice exactly one input
   *         per port is processed and one output pre port is produced.
   *
   * Please note that the communication paradigms "instant" and "sync" 
   * as defined here do not introduce any delay. Delay is assumed to
   * happen in components, e.g. in strongly causal components, in order
   * to allow feedback loops.
   * (This however is mainly a problem in simulation, not in an
   *  ordinary code generation.)
   * 
   * Therefore, the ArcTiming is defined in an extensible form.
   */
  ArcTiming implements ArcElement <110> =
    key("timing") ArcTimeMode ";"
  ;

  interface ArcTimeMode;

  ArcInstant implements ArcTimeMode = key("instant");

  ArcSync implements ArcTimeMode = key("sync");

  ArcUntimed implements ArcTimeMode = key("untimed");
}
