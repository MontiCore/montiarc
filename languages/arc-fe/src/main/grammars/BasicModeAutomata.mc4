/* (c) https://github.com/MontiCore/monticore */

/**
 * This grammar introduces mode-automata,
 * which in turn allow defining reconfiguration behavior of
 * composed components. At runtime components are limited
 * to a few modes that have been defined at design time.
 */
component grammar BasicModeAutomata extends ArcBasis,
          de.monticore.SCTransitions4Code {

  /**
   * Interface for elements which can appear in modes, additionally to usual ArcElements
   */
  interface ModeElement;

  /**
   * A Mode describes a configuration which can be exchanged for another one at runtime.
   * Multiple Mode Declarations may be used to describe a full mode
   * @Param modes Names of the modes, that share the defined structure
   * @Param ModeBody Mutual Structure Elements of the declared modes
   */
  scope ModeDeclaration implements ArcElement =
      "mode" (Name || ",")+ body:ComponentBody;

  /**
   * Allows to specify the behavior of a component by using a statechart
   * @Param initialMode defines the start-mode of this automaton
   * @Param transitions describes transitions between modes
   */
  ModeAutomaton implements ArcElement =
    "mode" "automaton" "{"
      initialMode:InitialModeDeclaration
      transitions:SCTransition*
    "}";

  /**
   * This element allows defining the initial mode of an automaton.
   * Referencing a mode here will mark it as initial.
   * @Param mode: Name of the initial mode
   */
  InitialModeDeclaration =
    "initial" mode:Name ";";

  /**
   * Defines Elements that may trigger transitions.
   * @Param event type of event
   * @Param Arguments Arguments in brackets
   */
  ReconfigurationEvent implements SCEvent = event:Name Arguments;

  // allow using statechart's keywords on other places as well
  // nokeyword "entry", "exit", "final", "mode";

}