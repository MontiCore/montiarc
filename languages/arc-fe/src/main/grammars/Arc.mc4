/* (c) https://github.com/MontiCore/monticore */
/**
 * This grammar defines the basic structural elements of component & connector
 * architecture descriptions in form of component models. The grammar contains
 * definitions for components, ports, and connectors.
 */
component grammar Arc extends de.monticore.MCBasics,
                              de.monticore.types.MCBasicTypes,
                              de.monticore.expressions.ExpressionsBasis {
  /**
   * ASTArcElement is the top-level interface for all elements of the component.
   * A component may contain arbitrary many elements. This interface may be
   * used as an extension point to enrich components with further elements.
   */
  interface ArcElement;

  /**
   * ASTComponent represents the definition of a component type. A component is
   * a unit of computation or a data store. The size of a component may scale
   * from a single procedure to a whole application. A component ist either
   * atomic or decomposed into subcomponents.
   *
   * @attribute name The type name of this component.
   * @attribute head Defines configuration options and extensions of this component.
   * @attribute instances List of optional instance names used to create.
   * of this component type. This is only for inner components.
   * @attribute body Contains the architectural elements of this component.
   */
  symbol scope Component implements ArcElement =
    "component" Name
    head:ComponentHead
    instance:(ComponentInstance || ",")*
    body:ComponentBody
  ;

  /**
   * ASTComponentHead holds the definitions of generic type parameters that may
   * be used as prt types in the component, definitions of configuration parameters
   * that ma may be used to configure the component, and this component's parent.
   *
   * @attribute typeParameters A list of generic type parameters that may be used 
   * to configure types in the component.
   * @attribute parameters A list of parameters that define configuration options
   * of the component.
   * @attribute parentComponent The type of the parent component.
   */
  ComponentHead =
    ( "<" typeParameter:(ArcTypeParameter || ",")+ ">" )?
    ( "(" parameter:(ArcParameterDeclaration || ",")+ ")" )?
    ( "extends" parentComponent:MCObjectType)?
  ;

  /**
   * ASTVariable is the top-level interface of the component's parameters and fields.
   */
  interface symbol ArcVariable = Name;

  /**
   * ASTArcParameterDeclaration define the configuration usage interface of the
   * component.
   *
   * @attribute type The type of the parameter.
   * @attribute arcParameter The identifier of the parameter.
   * @attribute defaultValue Default value used for the parameter if no
   * argument is given during instantiation.
   */
  ArcParameterDeclaration = type:MCType ArcParameter ("=" defaultValue:Expression)? ;

  /**
   * ASTArcParameter defines the parameter identifier.
   *
   * @attribute name The name of the parameter.
   */
  ArcParameter implements ArcVariable = Name;
  

  /**
   * ArcTypeParameter define type configuration options of the component.
   *
   * @attribute name Name of the generic type parameter.
   * @attribute upperBound Type restrictions to the generic type parameter.
   */
  symbol ArcTypeParameter = Name ( "extends" upperBound:(MCType || "&")+ )? ;

  /**
   * ASTComponentBody holds the architectural elements of the component.
   *
   * @attribute arcElements A list of architectural elements.
   */
  ComponentBody = "{" ArcElement* "}" ;

  /**
   * ASTComponentInterface defines the interface of the component in terms of
   * in- and outgoing ports.
   *
   * @attribute ports A list of port declarations contained in this interface.
   */
  ComponentInterface implements ArcElement =
    "port" port:(PortDeclaration || ",")+ ";"
  ;

  /**
   * ASTPortDeclaration declares one or more ports by specifying their
   * direction and type.
   *
   * @attribute direction The direction of the port. Can be in- or outgoing.
   * @attribute type The type of the port.
   * @attribute ports A list of declared ports.
   */
  PortDeclaration =
    {next("in", "out")}? direction:Name
    type:MCType port:(Port || ",")+
  ;

  /**
  * ASTPort defines the port identifier and functions as an extension point
  * for other port identifier kinds.
  *
  * @attribute name Name of the port.
  */
  symbol Port = Name;

  /**
  * ASTArcFieldDeclaration declares one or more component fields by
  * specifying their type and identifier.
  *
  * @attribute type The type of the component field.
  * @attribute fields A list of field identifier.
  */
  ArcFieldDeclaration implements ArcElement =
    type:MCType field:(ArcField || ",")+ ";"
  ;

  /**
   * ASTArcField defines the field identifier.
   *
   * @attribute name The name of the field.
   */
  ArcField implements ArcVariable = Name;

  /**
   * ASTComponentInstantiation holds one or more component instances that are
   * used in topology spanned by the component. This way the hierarchical
   * structure of decomposed components is defined.
   *
   * @attribute type The type of the instantiated component.
   * @attribute arguments A list of configuration arguments.
   * @attribute instances A list of instantiated components.
   */
  ComponentInstantiation implements ArcElement =
    "instance" type:MCObjectType
    ( "(" argument:(Expression || ",")+ ")" )?
    instance:(ComponentInstance || ",")* ";"
  ;

  /**
   * ASTComponentInstance defines the component instance identifier and functions
   * as an extension point for other identifier kinds of component instances.
   *
   * @attribute name The name of the component instance.
   */
  symbol ComponentInstance = Name;

  /**
   * ASTConnector connects one source port with one or more target ports.
   *
   * @attribute source The source port or component instance name.
   * @attribute targets A list of target ports or component instance names.
   */
  Connector implements ArcElement =
    "connect" source:PortExpression
    "->" target:(PortExpression || ",")+ ";"
  ;

  /**
   * ASTPortExpression refers to a port. Functions as an extension point for
   * more complex identifier.
   */
  PortExpression = qualifiedName:MCQualifiedName;
}