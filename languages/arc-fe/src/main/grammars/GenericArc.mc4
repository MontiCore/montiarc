/* (c) https://github.com/MontiCore/monticore */

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar defines the possibility for components to have
 * generic, i.e. type parameters, when instantiated.
 * It allows e.g. Buffer<T>(3) : a buffer of three elements and 
 * a generic type T, that can also be used as port type.
 * 
 * MontiArc's generic types are similar to Java generics and thus have a
 * similar syntactic shabe, but they should not be mixed up.
 *
 * This grammar is part of a hierarchy of architectural definitions, namely
 * * MontiArc.mc4 consisting of
 * * --  ArcBasis.mc4
 * * --  -- ComfortableArc.mc4
 * * --  -- GenericArc.mc4
 *
 */

component grammar GenericArc extends ArcBasis {

  /**
   * ASTGenericComponentHead in comparison to an ASTComponentHead also holds the
   * definitions of generic type parameters that may
   * be used as port and field types in the component.
   *
   * @attribute typeParameters A list of generic type parameters that may be used
   * to configure types in the component.
   * @attribute parameters A list of parameters that define configuration options
   * of the component.
   * @attribute parentComponent The type of the parent component.
   */
  GenericComponentHead extends ComponentHead =
    "<" (ArcTypeParameter || ",")+ ">"
    ( "(" (ArcParameter || ",")+ ")" )?
    ( "extends" parent:MCType)?
  ;

  /**
   * ArcTypeParameter define type configuration options of the component.
   *
   * @attribute name Name of the generic type parameter.
   * @attribute upperBound Type restrictions to the generic type parameter.
   */
  symbol ArcTypeParameter = Name ( "extends" upperBound:(MCType || "&")+ )? ;

}
