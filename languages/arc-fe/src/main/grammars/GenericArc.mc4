/* (c) https://github.com/MontiCore/monticore */

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */
 
/**
 * This grammar defines the possibility for components to have
 * generic type parameters that are filled when instantiated.
 * It allows e.g. Buffer<T>(3) : a buffer of three elements and 
 * a generic type T, that can also be used as port type.
 *
 * MontiArc's generic types are similar to Java generics and thus have a
 * similar syntactic shabe, but they should not be mixed up.
 * Type parameters are defined in "<...>", while 
 * value parameters are defined in "(...)".
 *
 * This grammar is part of the MontiArc langauge definition,
 * which are organized according to this extension hierachy:
 * * ArcBasis.mc4
 * * -- ComfortableArc.mc4
 * * -- GenericArc.mc4
 * * -- AssumptionGuarantee.mc4
 *
 * * ArcCore.mc4 composes
 *   + ArcBasis.mc4 + ComfortableArc.mc4 + GenericArc.mc4
 *   and builds the core of architectural modelling
 *   (still without concrete expressions, literals, etc.)
 *
 * Furthermore MontiArc.mc4 extends Arc.mc4 to a complete
 * language, with Expressions, Literals, etc. defined
 * * ArcCore.mc4
 * * -- MontiArc.mc4
 *
 */

component grammar GenericArc extends ArcBasis {

  /**
   * ASTGenericComponentHead in comparison to an ASTComponentHead also holds the
   * definitions of generic type parameters that may
   * be used as port and field types in the component.
   *
   * @attribute typeParameters A list of generic type parameters that may be used
   * to configure types in the component.
   * @attribute parameters A list of parameters that define configuration options
   * of the component.
   * @attribute parentComponent The type of the parent component.
   */
  GenericComponentHead extends ComponentHead =
    "<" (ArcTypeParameter || ",")+ ">"
    ( "(" (ArcParameter || ",")+ ")" )?
    ( "extends" parent:MCType)?
  ;

  /**
   * ArcTypeParameter define type configuration options of the component.
   *
   * @attribute name Name of the generic type parameter.
   * @attribute upperBound Type restrictions to the generic type parameter.
   */
  symbol ArcTypeParameter = Name ( "extends" upperBound:(MCType || "&")+ )? ;

}
