package de.monticore.automaton;

component grammar IOAutomaton extends de.monticore.lang.montiarc.Values {

    /**
     * An Automaton only AutomatonCore to simplify later embedding
     * @attribute Stereotype: The optional stereotype of the automaton, e.g. <<Public>>
     * @attribute Name: The name of the automaton
     * @attribute AutomatonCore: The automaton body
     */
    Automaton@! = Stereotype? "automaton" Name "{"
      AutomatonCore
    "}";
    
    /**
     * This is the body of the automaton
     * @attribute AutomatonContext: Declaration of all Inputs/Outputs/Variables
     * @attribute AutomatonContent: Declaration of all States/Transitions
     */
    AutomatonCore@! = AutomatonContext AutomatonContent;
    
    external GuardExpression;
    
    external Valuation;
    
    /**
     * The declaration of Inputs/Outputs/Variables
     * @attribute InputDeclaration: Declaration of inputs, which are used in a transition as Stimuli-Variables
     * @attribute OutputDeclaration: Declaration of outputs, which are used in a transition as Reaction-Variables
     * @attribute VariableDeclaration: Declaration of variables, which can be used in stimuli, reactions and guards
     */
    AutomatonContext = ( InputDeclaration | OutputDeclaration | VariableDeclaration )*; 
    
    /**
     * The declaration of states and transitions defining the "real" automaton
     * @attribute StateDeclaration: Declaration of the state Names
     * @attribute InitialStateDeclaration: Defines which states are initial states and their initial reaction
     * @attribute TransitionDeclaration: Declares the transition with guards, stimuli and reactions
     */
    AutomatonContent = ( StateDeclaration | InitialStateDeclaration | Transition)*;    
    
    /**
     * Declaration of the automaton states
     * @attribute State: A state of the automaton
     */
    StateDeclaration = "state" State ( "," State )* ";" ;
    
    /**
     * A single State
     * @attribute Stereotype: The optional stereotype of the state, e.g. <<Public>>
     * @attribute Name: The name of the state
     */
    State@! = Stereotype? Name;
    
    /**
     * Declaration of the states which the automaton starts in
     * @attribute Name: The name of the state, should be one defined in the StateDeclaration
     * @attribute Block: The initial output
     */
    InitialStateDeclaration@! = "initial" Name ("," Name)* ("/" Block)? ";";

    /**
     * The declarations of a single Transition
     * @attribute source: The source state name of the transition
     * @attribute target: The target state name of the transition
     * @attribute Guard: The transition is only active when the guard is true
     * @attribute stimulus: The trigger of the transition
     * @attribute reaction: What is done when the transition is taken
     */
    Transition@! = source:Name ("->" target:Name)? 
                                Guard?
                                stimulus:Block? 
                                ("/" reaction:Block)? ";";

    /**
     * Defines the Guard of a transition
     * @attribute kind: The name of the guard kind.
     *                  At the moment this is only "java" but there maybe more later on
     * @attribute guardExpression: The expression which should be true for the transition to be active
     */
    Guard@! = 
        "[" (kind:Name ":")? 
        GuardExpression "]";
    
    /**
     * The Value for empty data
     */
    //NoData implements Value = "--";
    
    
    
    // Following Rules are copied from:
    // https://sselab.de/lab2/private/svn/MontiCore/trunk/mclang/common-values/src/main/grammars/de/monticore/lang/common/CommonValues.mc
    
    /**
     * Use this interface to embedd values.
     * It has to be implemented by all values and additionally servers
     * as an extension point to add futher values to sublanguages.
     */ 
    //interface Value;

    /**
     * A signed literal value.
     * @example "Any String", -3, 17.3
     *
     * @attribute value the concrete literal value
     */
  	//LiteralValue implements Value = value:SignedLiteral;
    
    
    
    // Following Rules are copied from:
    // https://sselab.de/lab2/private/svn/project/trunk/core/languages/behavior-base-fe/src/main/grammars/de/montiarcautomaton/core/languages/behaviorbase/BehaviorBase.mc
    
    /**
     * Declaration of the variables used in the stimuli
     * @attribute Type: The type of the variable, e.g. "int"
     * @attribute Variable: The variable
     */     
    InputDeclaration = "input" Type Variable ("," Variable)* ";";
    
    /**
     * Declaration of the variables used in the reaction
     * @attribute Type: The type of the variable, e.g. "int"
     * @attribute Variable: The variable
     */
    OutputDeclaration = "output" Type Variable ("," Variable)* ";";
    
    /**
     * Declaration of local variable used in stimulus, guard and output.
     * @attribute Type: The type of the variable, e.g. "int"
     * @attribute Variable: The variable which should be a local variable.
     *
     */ 
    VariableDeclaration = "variable" Type Variable ("," Variable)* ";";
    
    /**
     * A automaton variable
     * @attribute Name: The name of the variable
     */
    Variable@! = Name ("=" Valuation)?;
       
    /**
     * A block containing a row of assignments, e.g. "a = 5 , b = Q.fetchX()"
     * @attribute IOAssignment: The assignment
     */ 
    Block= "{" IOAssignment ("," IOAssignment)* "}";
    
    /**
     * A assignment of the form "var =/== x"
     * @attribute Name: The name of the variable that gets assigned
     */ 
    IOAssignment = (Name operator:[Single:"="|Double:"=="])? (Alternative | ValueList);
    
    Alternative = "alt{" ValueList ("," ValueList)* "}";
    
    /**
     * A row of valuations separated by a ",", e.g. "a.getX() : B.fetch().KIND : ++a%2"
     * @attribute Valuation: The valuation
     */    
    ValueList	
    	= (("[" Valuation ("," Valuation )* "]") | Valuation);  
}
