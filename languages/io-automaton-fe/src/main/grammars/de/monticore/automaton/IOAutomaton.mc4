package de.monticore.automaton;

component grammar IOAutomaton extends de.monticore.lang.montiarc.Values {


    /**
     * An IOAutomaton holds only an EmbeddedAutomaton to simplyfy the later on embedment
     * @attribute EmbeddedAutomaton: The automaton, embedded in the automaton keyword and the brackets
     */
    Automaton@! = Stereotype? "automaton" Name "{"
      AutomatonCore
    "}";
    
    AutomatonCore@! = AutomatonContext AutomatonContent;
    
     external GuardExpression;
     external Valuation;
    
    /**
     * The EmbeddedAutomaton represents the "real" Automaton
     * @attribute EventDeclaration: Declaration of the events, which are used in the Transition as Stimuli-Variables
     * @attribute ActionDeclaration: Declaration of actions, which are used in the transition as Reaction-Variables
     * @attribute StateDeclaration: Declaration of the State Names
     * @attribute InitialStateDeclaration: Defines which states are initial states and their initial reaction
     * @attribute TransitionDeclaration: Declares the Transition with Guards, Stimuli and Reactions
     */
    AutomatonContext = ( InputDeclaration | OutputDeclaration | VariableDeclaration )*; 
    
    /**
     * The EmbeddedAutomaton represents the "real" Automaton
     * @attribute EventDeclaration: Declaration of the events, which are used in the Transition as Stimuli-Variables
     * @attribute ActionDeclaration: Declaration of actions, which are used in the transition as Reaction-Variables
     * @attribute StateDeclaration: Declaration of the State Names
     * @attribute InitialStateDeclaration: Defines which states are initial states and their initial reaction
     * @attribute TransitionDeclaration: Declares the Transition with Guards, Stimuli and Reactions
     */
    AutomatonContent = ( StateDeclaration | InitialStateDeclaration | Transition)*;    
    
    /**
     * Declaration of the IOAutomaton-States
     * @attribute State: A state of the automaton
     */
    StateDeclaration = "state" State ( "," State )* ";" ;
    
    /**
     * A single State
     * @attribute Stereotype: The optional stereotype of the state, e.g. <<Public>>
     * @attribute Name: The name of the state
     */
    State@! = Stereotype? Name;
    
    /**
     * Declaration of the states which the automaton starts in
     * @attribute Name: The name of the state, should be one defined in the StateDeclaration
     * @attribute Block: The initial output
     */
    InitialStateDeclaration@! = "initial" Name ("," Name)* ("/" Block)? ";";

    /**
     * The declarations of a single Transition
     * @attribute source: The source state of the transition
     * @attribute target: The target state of the transition
     * @attribute Guard: The transition is only active when the guard is true
     * @attribute stimulus: The trigger of the transition
     * @attribute reaction: What is done when the transition is taken
     */
    Transition@! = source:Name ("->" target:Name)? 
                                Guard?
                                stimulus:Block? 
                                ("/" reaction:Block)? ";";

    /**
     * Defines the Guard of a transition
     * @attribute kind: The name of the guard kind.
     *                  At the moment this is only "java" but there maybe more later on
     * @attribute guardExpression: The expression which should be true for the transition to be activ
     */
    Guard@! = 
        "[" (kind:Name ":")? 
        GuardExpression "]";
    
    /**
     * The Value for empty data
     */
    //NoData implements Value = "--";
    
    
    
    // Following Rules are copied from:
    // https://sselab.de/lab2/private/svn/MontiCore/trunk/mclang/common-values/src/main/grammars/de/monticore/lang/common/CommonValues.mc
    
    /**
     * Use this interface to embedd values.
     * It has to be implemented by all values and additionally servers
     * as an extension point to add futher values to sublanguages.
     */ 
    //interface Value;

    /**
     * A signed literal value.
     * @example "Any String", -3, 17.3
     *
     * @attribute value the concrete literal value
     */
  	//LiteralValue implements Value = value:SignedLiteral;
    
    
    
    // Following Rules are copied from:
    // https://sselab.de/lab2/private/svn/project/trunk/core/languages/behavior-base-fe/src/main/grammars/de/montiarcautomaton/core/languages/behaviorbase/BehaviorBase.mc
    
    /**
     * Declaration of the variables used in the stimuli, the so called events
     * @attribute IOAutomatonVariable: The variable which should be used as event
     */     
    InputDeclaration = "input" Type Variable ("," Variable)* ";";
    
    /**
     * Declaration of the variables used in the reaction, the so called actions
     * @attribute IOAutomatonVariable: The variable which should be used as action
     */
    OutputDeclaration = "output" Type Variable ("," Variable)* ";";
    
    /**
     * Declaration of local variable used in stimulus, guard and output.
     * @attribute IOAutomatonVariable: The variable which should be a local variable.
     *
     */ 
    VariableDeclaration = "variable" Type Variable ("," Variable)* ";";
    
    /**
     * A variable used by the Behavior Language
     * @attribute Type: The type of the variable, e.g. "int"
     * @attribute Name: The name of the variable
     */
    Variable@! = Name ("=" Valuation)?;
       
    /**
     * A block containing a row of statements, e.g. "a = 5 , b = Q.fetchX()"
     */ 
    Block= "{" IOAssignment ("," IOAssignment)* "}";
    
    /**** /IOAssignment = (Name "=")? (Alternative | ValueList); ***/
    IOAssignment = (Name operator:[Single:"="|Double:"=="])? (Alternative | ValueList);
    
    Alternative = "alt{" ValueList ("," ValueList)* "}";
    
    /**
     * A row of Expressions separated by a ":", e.g. "a.getX() : B.fetch().KIND : ++a%2"
     * @attribute StreamExpression: The Expression
     */    
    ValueList	
    	= (("[" Valuation ("," Valuation )* "]") | Valuation);  
}
