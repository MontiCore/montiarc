/* (c) https://github.com/MontiCore/monticore */

plugins {
  id 'java'
}

group = "montiarc.applications"

def hwcDir = "$projectDir/src/main/java"
def genDir = "$buildDir/generated-sources"

sourceSets {
  main {
    java.srcDirs += ["$hwcDir", "$genDir"]
  }
}

tasks.withType(JavaCompile) {
  options.fork = false
  options.encoding = "UTF-8"
  options.deprecation = false
  options.warnings = false
  options.headerOutputDirectory.convention(null)
}

configurations {
  generateCD
  generateMA
  librarymodels
}

dependencies {
  //MontiCore dependencies
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
  implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"

  //Internal dependencies
  generateCD project(":generators:cd2pojo")
  generateMA project(":generators:ma2java")
  librarymodels project(":libraries:maJavaLib")
  librarymodels project(":libraries:lejos-rte")
  implementation project(":languages:montiarc-fe")
  implementation project(":libraries:majava-rte")
  implementation project(":libraries:lejos-rte")

  //Other dependencies
  implementation "lejos.nxt:classes:0.9.1-beta"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
}

task unpackLibrarymodels(type: Sync) {
  dependsOn configurations.librarymodels

  from {
    configurations.librarymodels.collect { zipTree(it) }
  }
  into "$buildDir/$librarymodels_classifier"
}

task generateCD(type: JavaExec) {
  classpath = configurations.generateCD
  mainClass = "de.monticore.cd2pojo.POJOGeneratorScript"

  args "$projectDir/src/main/resources, $buildDir/$librarymodels_classifier", "$genDir", "$hwcDir"
}

task generateMontiArc(type: JavaExec) {
  classpath = configurations.generateMA
  mainClass = "montiarc.generator.MontiArcGeneratorTool"

  args "$projectDir/src/main/resources, $buildDir/$librarymodels_classifier", "$genDir", "$hwcDir"
}

generateCD.dependsOn unpackLibrarymodels
generateMontiArc.dependsOn generateCD
compileJava.dependsOn generateMontiArc

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  repositories.maven {
    name = "$SE_Nexus_ID"
    credentials.username mavenUser
    credentials.password mavenPassword
    url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
  }
}