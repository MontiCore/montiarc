/* (c) https://github.com/MontiCore/monticore */
/* generated from model sim.comptest.TickSource*/
/* generated by template mc.umlp.arc.factories.ComponentFactory*/
package sim.comp.gen.factories;

import de.se_rwth.commons.logging.Log;

/**
 * This factory produces objects that implement interface
 * {@link sim.comptest.gen.interfaces.ITickSource}.<br>
 * <br>
 * Generated with MontiArc 2.5.0-SNAPSHOT.<br>
 * 
 */
public class TickSourceFactory {
  
  /** Factory singleton instance. */
  protected static TickSourceFactory theInstance;
  
  /** Protected default constructor. */
  protected TickSourceFactory() {
  
  }
  
  /**
   * Registers a concrete factory instance that is used to produce instances of ITickSource$.
   *
   * @param factory the factory instance that is to be used
   */
  public static void register(TickSourceFactory factory) {
    if (theInstance == null || theInstance.getClass().equals(TickSourceFactory.class)) {
      theInstance = factory;
    }
    else {
      Log.error(
          "More then one concrete factory registered for TickSourceFactory. Current factory class is: "
              +
              theInstance.getClass().getName() + ", factory class to register: "
              + factory.getClass().getName());
    }
  }
  
  /**
   * Resets the TickSourceFactory to use its default factory.
   */
  public static void reset() {
    theInstance = new TickSourceFactory();
  }
  
  /**
   * @return a new TickSource component
   */
  public static sim.comp.gen.interfaces.ITickSource create() {
    if (theInstance == null) {
      theInstance = new TickSourceFactory();
    }
    return theInstance.doCreate();
  }
  
  /**
   * @return a new TickSource component
   */
  protected sim.comp.gen.interfaces.ITickSource doCreate() {
    return new sim.comp.TickSourceImpl();
  }
}
