/* (c) https://github.com/MontiCore/monticore */
/* generated from model sim.comp.MessageAbstraction*/
/* generated by template mc.umlp.arc.factories.ComponentFactory*/
package sim.comp.gen.factories;

import de.se_rwth.commons.logging.Log;
import sim.comp.MessageAbstractionImpl;

/**
 * This factory produces objects that implement interface
 * {@link sim.comp.gen.interfaces.IMessageAbstraction}.<br>
 * <br>
 * Generated with MontiArc 2.5.0-SNAPSHOT.<br>
 * 
 */
public class MessageAbstractionFactory {
  
  /** Factory singleton instance. */
  protected static MessageAbstractionFactory theInstance;
  
  /**
   * @return a new MessageAbstraction component
   */
  public static <T> sim.comp.gen.interfaces.IMessageAbstraction<T> create() {
    if (theInstance == null) {
      theInstance = new MessageAbstractionFactory();
    }
    return theInstance.doCreate();
  }
  
  /**
   * Registers a concrete factory instance that is used to produce instances of
   * IMessageAbstraction$.
   * 
   * @param factory the factory instance that is to be used
   */
  public static void register(MessageAbstractionFactory factory) {
    if (theInstance == null || theInstance.getClass().equals(MessageAbstractionFactory.class)) {
      theInstance = factory;
    }
    else {
      Log.error(
          "More then one concrete factory registered for MessageAbstractionFactory. Current factory class is: "
              +
              theInstance.getClass().getName() + ", factory class to register: "
              + factory.getClass().getName());
    }
  }
  
  /**
   * Resets the MessageAbstractionFactory to use its default factory.
   */
  public static void reset() {
    theInstance = new MessageAbstractionFactory();
  }
  
  /** Protected default constructor. */
  protected MessageAbstractionFactory() {
  
  }
  
  /**
   * @return a new MessageAbstraction component
   */
  protected <T> sim.comp.gen.interfaces.IMessageAbstraction<T> doCreate() {
    return new MessageAbstractionImpl<T>();
  }
}
